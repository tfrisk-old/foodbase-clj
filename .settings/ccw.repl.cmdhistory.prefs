cmdhistory=["(clojure.core/in-ns 'foodbase.core)\\nnull\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(println \\"Hello, Parser\\")\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.core)\\nnull\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\nnull\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(println \\"Hello, Parser\\")\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\nnull\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(println \\"Hello, Parser\\")\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\nnull\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(+ 1 2)\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\nnull\\n(clojure.core/in-ns 'user)" ";; Loading file /Users/teemufrisk/Projects/eclipse-workspace/foodbase/src/foodbase/usdaparser.clj" "(clojure.core/in-ns 'foodbase.usdaparser)\\nnull\\n(clojure.core/in-ns 'user)" ";; Switching to foodbase.usdaparser namespace" "(clojure.core/in-ns 'foodbase.usdaparser)" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]))" "(+ 1 2)" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]))" "(with-open [rdr (io/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (println line)))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]))" "(def FOOD_DES-dbcolumns (list &\\n  (\\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\")))" "(defn parse-FOOD_DES-line [line]\\n  (split line \#\\"\\\\^\\")\\n  )" "(defn parse-FOOD_DES-line [line]\\n  (clojure.string/split line \#\\"\\\\^\\")\\n  )" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (use [clojure.string])\\n\\n(def FOOD_DES-dbcolumns (list &\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (use [clojure.string])\\n\\n(def FOOD_DES-dbcolumns (list &\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))\\n\\n\\"~11790~^~1100~^~Kale, cooked, boiled, drained, with salt~^~KALE,CKD,BLD,DRND,W/SALT~^~~^~~^~~^~~^0^~~^6.25^2.44^8.37^3.57\\"\\n(defn parse-FOOD_DES-line [line]\\n  (split line \#\\"\\\\^\\")\\n  )" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (use [clojure.string])\\n\\n(def FOOD_DES-dbcolumns (list &\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (use [clojure.string])\\n\\n(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (use [clojure.string])\\n\\n(def FOOD_DES-dbcolumns (list\\n  (\\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\")))\\n\\n\\"~11790~^~1100~^~Kale, cooked, boiled, drained, with salt~^~KALE,CKD,BLD,DRND,W/SALT~^~~^~~^~~^~~^0^~~^6.25^2.44^8.37^3.57\\"\\n(defn parse-FOOD_DES-line [line]\\n  (split line \#\\"\\\\^\\")\\n  )" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (use [clojure.string] \:as string)" "(def FOOD_DES-dbcolumns (list\\n  (\\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\")))" "(def FOOD_DES-dbcolumns (list &\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  )" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  )" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]))" ";; Loading file /Users/teemufrisk/Projects/eclipse-workspace/foodbase/src/foodbase/usdaparser.clj" ";; Switching to foodbase.usdaparser namespace" "(clojure.core/in-ns 'foodbase.usdaparser)" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]))" "(def FOOD_DES-dbcolumns (list &\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" ";; Loading file /Users/teemufrisk/Projects/eclipse-workspace/foodbase/src/foodbase/usdaparser.clj" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(defn parse-FOOD_DES-line [line]\\n  (split line \#\\"\\\\^\\")\\n  )" "(with-open [rdr (io/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (parse-FOOD_DES-line line)))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (use [clojure.string]))" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(defn parse-FOOD_DES-line [line]\\n  (split line \#\\"\\\\^\\")\\n  )" "(with-open [rdr (io/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (parse-FOOD_DES-line line)))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (use [clojure.string] \:as string))" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (use [clojure.string] \:as string))" "(with-open [rdr (io/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (parse-FOOD_DES-line line)))" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(defn parse-FOOD_DES-line [line]\\n  (split line \#\\"\\\\^\\")\\n  )" ";; Loading file /Users/teemufrisk/Projects/eclipse-workspace/foodbase/src/foodbase/usdaparser.clj" ";; Switching to foodbase.usdaparser namespace" "(clojure.core/in-ns 'foodbase.usdaparser)" ";; Loading file /Users/teemufrisk/Projects/eclipse-workspace/foodbase/src/foodbase/usdaparser.clj" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io] \:as io))" "(defn parse-FOOD_DES-line [line]\\n  (clojure.string/split line \#\\"\\\\^\\")\\n  )" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]))" ";; Switching to foodbase.usdaparser namespace" "(clojure.core/in-ns 'foodbase.usdaparser)" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (\:require [clojure.string \:as string]))" ";; Switching to foodbase.usdaparser namespace" "(clojure.core/in-ns 'foodbase.usdaparser)" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (\:require [clojure.string \:as string]))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]\\n            [clojure.string \:as string]))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]\\n            [clojure.string \:as string] \:verbose))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]\\n             \:verbose))" "(require '[clojure.string \:as string] \:verbose)" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io] \:verbose))" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io] \:verbose))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]))" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(defn parse-FOOD_DES-line [line]\\n  (string/split line \#\\"\\\\^\\")\\n  )" "(with-open [rdr (io/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (parse-FOOD_DES-line line)))" ";; Switching to foodbase.usdaparser namespace" "(clojure.core/in-ns 'foodbase.usdaparser)" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io]))" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (\:use [clojure.string \:only [split]]))" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as io])\\n  (\:use [clojure.string \:only [split]]))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as jio])\\n  (\:use [clojure.string \:only [split]]))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as jio]))" "(defn parse-FOOD_DES-line [line]\\n  )" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as jio]))" ";; Switching to foodbase.usdaparser namespace" "(clojure.core/in-ns 'foodbase.usdaparser)" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (->> rdr\\n    (line-seq)\\n    (parse-FOOD_DES-line line)))" ";; Switching to foodbase.usdaparser namespace" "(clojure.core/in-ns 'foodbase.usdaparser)" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (->> rdr\\n    (line-seq)\\n    (parse-FOOD_DES-line line)))" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as jio]))" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn parse-FOOD_DES-line [line]\\n  )\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (->> rdr\\n    (line-seq)\\n    (parse-FOOD_DES-line line)))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (line-seq rdr)\\n    (parse-FOOD_DES-line line))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (parse-FOOD_DES-line line)))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\nnull\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn parse-FOOD_DES-line [line]\\n  (clojure.string/split line \#\\"\\\\\\\\^\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn parse-FOOD_DES-line [line]\\n  (split line \#\\"\\\\\\\\^\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as jio])\\n  (\:require [clojure.string \:as string])\\n\\n(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))\\n\\n\\"~11790~^~1100~^~Kale, cooked, boiled, drained, with salt~^~KALE,CKD,BLD,DRND,W/SALT~^~~^~~^~~^~~^0^~~^6.25^2.44^8.37^3.57\\"\\n(defn parse-FOOD_DES-line [line]\\n  (string/split line \#\\"\\\\\\\\^\\"))\\n(clojure.core/in-ns 'user)" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as jio])\\n  (\:require [clojure.string \:as string])" "(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as jio])\\n  (\:require [clojure.string \:as string])\\n\\n(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))\\n\\n\\"~11790~^~1100~^~Kale, cooked, boiled, drained, with salt~^~KALE,CKD,BLD,DRND,W/SALT~^~~^~~^~~^~~^0^~~^6.25^2.44^8.37^3.57\\"\\n(defn parse-FOOD_DES-line [line]\\n  (string/split line \#\\"\\\\\\\\^\\"))\\n\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (parse-FOOD_DES-line line)))" "(def FOOD_DES-dbcolumns (list\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (parse-FOOD_DES-line line)))" "(defn parse-FOOD_DES-line [line]\\n  (string/split line \#\\"\\\\\\\\^\\"))" "(defn parse-FOOD_DES-line [line]\\n  (string/split line \#\\"\\\\^\\"))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (parse-FOOD_DES-line line)))" "(parse-FOOD_DES-line\\n  \\"~11790~^~1100~^~Kale, cooked, boiled, drained, with salt~^~KALE,CKD,BLD,DRND,W/SALT~^~~^~~^~~^~~^0^~~^6.25^2.44^8.37^3.57\\")" "(def FOOD_DES-dbcolumns '(\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\"Ref_desc\\",\\n            \\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))" "foodbase.usdaparser/FOOD_DES-dbcolumns" "(first foodbase.usdaparser/FOOD_DES-dbcolumns)" "(last foodbase.usdaparser/FOOD_DES-dbcolumns)" "(trim-tildes\\n  \\"~11790~^~1100~^~Kale, cooked, boiled, drained, with salt~^~KALE,CKD,BLD,DRND,W/SALT~^~~^~~^~~^~~^0^~~^6.25^2.44^8.37^3.57\\")" "(parse-list (trim-tildes\\n  \\"~11790~^~1100~^~Kale, cooked, boiled, drained, with salt~^~KALE,CKD,BLD,DRND,W/SALT~^~~^~~^~~^~~^0^~~^6.25^2.44^8.37^3.57\\"\\n  ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (trim-tildes line)\\n    (parse-list line)))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (parse-list (trim-tildes line))\\n    ))" "(with-open [rdr(jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (->> rdr\\n    (line-seq)\\n    (map trim-tildes)\\n    (map parse-list)))" "(with-open [rdr(jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (->> rdr\\n    (line-seq)\\n    (map trim-tildes)\\n    ))" "(with-open [rdr(jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (->> rdr\\n    (line-seq)\\n    (map parse-list)\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (parse-list (trim-tildes line))\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(parse-list (trim-tildes line))\\n    (println line)\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(parse-list (trim-tildes line))\\n    (println line)\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (parse-list (trim-tildes line))\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (trim-tildes line)\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (clojure.pprint/pprint (trim-tildes line))\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (parse-list (trim-tildes line))\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (sort (parse-list (trim-tildes line)))\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (print (parse-list (trim-tildes line)))\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (print (parse-list (trim-tildes line)) \\"\\\\n\\")\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(print (parse-list (trim-tildes line)) \\"\\\\n\\")\\n    ))" "(defn parse-list [line]\\n  (str/split line \#\\"\\\\^\\"))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    (clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(print (parse-list (trim-tildes line)) \\"\\\\n\\")\\n    ))" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (print (parse-list (trim-tildes line)) \\"\\\\n\\")\\n    ))" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(use 'korma.db)\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(def FOOD_DES-dbcolumns '(\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\n  \\"Ref_desc\\",\\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn trim-tildes [line]\\n  (str/replace line \#\\"~\\" \\"\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn parse-list [line]\\n  (str/split line \#\\"\\\\^\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn create-sql-command [values]\\n  )\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (print (parse-list (trim-tildes line)) \\"\\\\n\\")\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(def FOOD_DES-dbcolumns '(\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\n  \\"Ref_desc\\",\\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn parse-list [line]\\n  (str/split line \#\\"\\\\^\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(ns foodbase.usdaparser\\n  (\:require [clojure.java.io \:as jio])\\n  (\:require [clojure.string \:as str])\\n  (use korma.db))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(def FOOD_DES-dbcolumns '(\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\n  \\"Ref_desc\\",\\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defdb prod (sqlite3 {\:db \\"foodbase\\"}))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defdb prod (sqlite3 {\:db \\"foodbase\\"\\n                      \:user \\"foodbase\\"}))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defdb prod (sqlite3 {\:db \\"foodbase\\"\\n                      \:user \\"foodbase\\"\\n                      \:delimiters \\"\\"}))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defdb prod (sqlite3 {\:db \\"foodbase\\"\\n                      \:user \\"foodbase\\"\\n                      \:password \\"foodpass\\"}))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defdb prod (sqlite3 {\:db \\"foodbase\\"\\n                      \:user \\"foodbase\\"}))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn map-values [values, columns]\\n  )\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn trim-tildes [line]\\n  (str/replace line \#\\"~\\" \\"\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(zipmap FOOD_DES-dbcolumns\\n  (parse-list\\n    (trim-tildes\\n      \\"~11790~^~1100~^~Kale, cooked, boiled, drained, with salt~^~KALE,CKD,BLD,DRND,W/SALT~^~~^~~^~~^~~^0^~~^6.25^2.44^8.37^3.57\\"\\n      )))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (print (zipmap FOOD_DES-dbcolumns (parse-list (trim-tildes line)) \\"\\\\n\\"))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (print (zipmap FOOD_DES-dbcolumns (parse-list (trim-tildes line))) \\"\\\\n\\")\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (pprint (zipmap FOOD_DES-dbcolumns (parse-list (trim-tildes line))) \\"\\\\n\\")\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (clojure.pprint/pprint (zipmap FOOD_DES-dbcolumns (parse-list (trim-tildes line))) \\"\\\\n\\")\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (clojure.pprint/pprint (zipmap FOOD_DES-dbcolumns (parse-list (trim-tildes line))))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (clojure.pprint/pprint (map-raw-values line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (clojure.pprint/pprint (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(clojure.pprint/pprint (map-raw-lines line))\\n    (insert-db-entry (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(clojure.pprint/pprint (map-raw-lines line))\\n    (insert-db-entry (map-raw-lines line))\\n    ))" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(def FOOD_DES-dbcolumns '(\\n  \\"NDB_No\\",\\"FdGrp_Cd\\",\\"Long_Desc\\",\\"Short_Desc\\",\\"ComName\\",\\"ManufacName\\",\\"Survey\\",\\n  \\"Ref_desc\\",\\"Refuse\\",\\"SciName\\",\\"N_Factor\\",\\"Pro_Factor\\",\\"Fat_Factor\\",\\"CHO_Factor\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defdb prod (sqlite3 {\:db \\"foodbase\\"\\n                      \:user \\"foodbase\\"}))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defentity FOOD_DES\\n  (pk \:id)\\n  (table \:FOOD_DES)\\n  (database foodbase))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defentity FOOD_DES\\n  (pk \:id)\\n  (table \:FOOD_DES)\\n  (database \\"foodbase\\"))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn insert-db-entry [entry]\\n  (insert FOOD_DES (values entry)))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(clojure.pprint/pprint (map-raw-lines line))\\n    (insert-db-entry (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defdb prod (sqlite3 {\:db \\"foodbase\\"\\n                      \:user \\"foodbase\\"\\n                      \:password \\"foodpass\\"}))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(clojure.pprint/pprint (map-raw-lines line))\\n    (insert-db-entry (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defdb foodbase (sqlite3 {\:db \\"foodbase\\"\\n                      \:user \\"foodbase\\"\\n                      \:password \\"foodpass\\"}))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defentity FOOD_DES\\n  (pk \:id)\\n  (table \:FOOD_DES)\\n  (database foodbase))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(clojure.pprint/pprint (map-raw-lines line))\\n    (insert-db-entry (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defentity FOOD_DES\\n  (pk \:id)\\n  (table \:FOOD_DES)\\n  (database devel))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (clojure.pprint/pprint (map-raw-lines line))\\n    ;(insert-db-entry (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(clojure.pprint/pprint (map-raw-lines line))\\n    (insert-db-entry (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (clojure.pprint/pprint (map-raw-lines line))\\n    ;(insert-db-entry (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    (clojure.pprint/pprint (map-raw-lines line))\\n    (print (map-raw-lines line))\\n    ;(insert-db-entry (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(clojure.pprint/pprint (map-raw-lines line))\\n    (print (map-raw-lines line))\\n    ;(insert-db-entry (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(clojure.pprint/pprint (map-raw-lines line))\\n    (print (map-raw-lines line) \\"\\\\n\\")\\n    ;(insert-db-entry (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(clojure.pprint/pprint (map-raw-lines line))\\n    (print (map-raw-lines line) \\"\\\\n\\")\\n    ;(insert-db-entry (map-raw-lines line))\\n    ))\\n(clojure.core/in-ns 'user)" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn -main [& args]\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES-trimmed.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(clojure.pprint/pprint (map-raw-lines line))\\n    ;(print (map-raw-lines line) \\"\\\\n\\")\\n    (insert-db-entry (map-raw-lines line))\\n    ))\\n)\\n(clojure.core/in-ns 'user)" ";; Loading file /Users/teemufrisk/Projects/eclipse-workspace/foodbase/src/foodbase/usdaparser.clj" "(clojure.core/in-ns 'foodbase.usdaparser)\\n(defn -main [& args]\\n(with-open [rdr (jio/reader \\"./src/foodbase/FOOD_DES.txt\\")]\\n  (doseq [line (line-seq rdr)]\\n    ;(clojure.pprint/pprint (parse-list (trim-tildes line)))\\n    ;(clojure.pprint/pprint (map-raw-lines line))\\n    ;(print (map-raw-lines line) \\"\\\\n\\")\\n    (insert-db-entry (map-raw-lines line))\\n    ))\\n)\\n(clojure.core/in-ns 'user)"]
eclipse.preferences.version=1
